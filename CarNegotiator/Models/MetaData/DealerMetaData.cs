//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarNegotiator.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Web.Mvc;

    public class DealerMetaData
    {


        [Display(Name = "Please select Title",ShortName ="titleId")]
        [UIHint("Dropdown")]
        public int titleId { get; set; }

        [Display(Name = "First Name (Required)", Prompt = "Please enter first name")]
        [Required(ErrorMessage = "First Name is required ")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "First Name should be between 2 to 50 Characters")]
        [UIHint("RequiredTextbox")]
        public string firstName { get; set; }

        [Display(Name = "Last Name (Optional)", Prompt = "Please enter last name")]
        [UIHint("OptionalTextbox")]
        public string lastName { get; set; }

        [Display(Name = "Mobile Number (Required)", Prompt = "Please enter Mobile Number")]
        [Required(ErrorMessage = "Mobile Number is required ")]
        [StringLength(50, MinimumLength = 10, ErrorMessage = "Mobile Number should be minimum 10 Characters")]
        [UIHint("RequiredTextbox")]
        public string MobileNumber { get; set; }

        [Display(Name = "Telephone Number (Required)", Prompt = "Please enter Telephone Number")]
        [Required(ErrorMessage = "Telephone Number is required ")]
        [StringLength(50, MinimumLength = 10, ErrorMessage = "Telephone Number should be minimum 10 Characters")]
        [UIHint("RequiredTextbox")]
        public string TelephoneNumber { get; set; }

        [Display(Name = "Email Address (Required)", Prompt = "Please enter email address.This is your login Id")]
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Email address is required")]
        [UIHint("RequiredTextbox")]
        public string emailAddress { get; set; }

        [Display(Name = "Password (Required)", Prompt = "Please enter password")]
        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        [UIHint("PassWordTextBox")]
        [StringLength(15, MinimumLength = 8, ErrorMessage = "Password must be between 8 to 15 Characters")]
        public string password { get; set; }

        [Display(Name = "Please select your province")]
        [Required(ErrorMessage = "Province is required")]
        [UIHint("Dropdown")]
        public int provinceId { get; set; }

        [Display(Name = "Please select Town")]
        [Required(ErrorMessage = "Town is required")]
        [UIHint("Dropdown")]
        public int townId { get; set; }

        [Display(Name = "Please enter your Position (Required)", Prompt = "Please enter Position")]
        [Required(ErrorMessage = "Position is required ")]
        [StringLength(50, MinimumLength = 6, ErrorMessage = "Position should be minimum 6 Characters")]
        [UIHint("RequiredTextbox")]
        public string Position { get; set; }

        [Display(Name = "Please enter your Business Name (Required)", Prompt = "Please enter Business Name")]
        [Required(ErrorMessage = "Business Name is required ")]
        [StringLength(50, MinimumLength = 6, ErrorMessage = "Business Name should be minimum 6 Characters")]
        [UIHint("RequiredTextbox")]
        public string businessName { get; set; }

        [Display(Name = "Please enter your Registration Number (Required)", Prompt = "Please enter Registration Number")]
        [Required(ErrorMessage = "Registration Number is required ")]
        [StringLength(50, MinimumLength = 6, ErrorMessage = "Registration Number should be minimum 6 Characters")]
        [UIHint("RequiredTextbox")]
        public string registrationNumber { get; set; }

        [Display(Name = "Please enter your VAT Number (Required)", Prompt = "Please enter VAT Number")]
        [Required(ErrorMessage = "VAT Number is required ")]
        [StringLength(50, MinimumLength = 6, ErrorMessage = "VAT Number should be minimum 6 Characters")]
        [UIHint("RequiredTextbox")]
        public string VATNumber { get; set; }

        [Display(Name = "Please enter your Address (Required)", Prompt = "Please enter Address")]
        [Required(ErrorMessage = "Address is required ")]
        [StringLength(200, MinimumLength = 25, ErrorMessage = "Address should be minimum 25 Characters")]
        [DataType(DataType.MultilineText)]
        [UIHint("TextArea")]
        public string Address { get; set; }

        [Display(Name = "Please select your payment Gateway")]
        [Required(ErrorMessage = "Payment Gateway is required")]
        [UIHint("Dropdown")]
        public int paymentGatewayId { get; set; }

        [Display(Name = "Notify by email for new requests")]
        public bool newlistemailnotify { get; set; }

        [Display(Name = "Notify by SMS for new requests")]
        public bool newlistsmsnotify { get; set; }

        [Display(Name = "Notify by email if a dealer bid lower than my bid")]
        public bool lowerbidemailnotify { get; set; }

        [Display(Name = "Notify by SMS if a dealer bid lower than my bid")]
        public bool lowerbidsmsnotify { get; set; }

        [Display(Name = "Notify by email for a day before bid is closing")]
        public bool closenextdayemailnotify { get; set; }

        [Display(Name = "Notify by SMS for a day before bid is closing")]
        public bool closenextdaysmsnotify { get; set; }

        [Display(Name = "Notify by email when a bid is closed")]
        public bool closedemailnotify { get; set; }

        [Display(Name = "Notify by SMS when a bid is closed")]
        public bool closedsmsnotify { get; set; }

    }

    [MetadataType(typeof(DealerMetaData))]
    public partial class Dealer
    {
        public List<CheckBoxListItem> ProvicesToSelect { get; set; }
        public List<CheckBoxListItem> MakesToSelect { get; set; }
    }
}
